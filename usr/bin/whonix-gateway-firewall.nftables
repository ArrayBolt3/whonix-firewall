#!/bin/bash

## Copyright (C) 2012 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## Copyright (C) 2014 - 2015 Jason Mehring <nrgaway@gmail.com>
## See the file COPYING for copying conditions.

#### meta start
#### project Whonix
#### category networking and firewall
#### description
## firewall script
#### meta end

## --reject-with
## http://ubuntuforums.org/showthread.php?p=12011099

## Set to icmp-admin-prohibited because icmp-port-unreachable caused
## confusion. icmp-port-unreachable looks like a bug while
## icmp-admin-prohibited hopefully makes clear it is by design.

set -e

error_handler() {
  echo "$0 ##################################################"
  echo "$0 ERROR: Whonix firewall script failed!"
  echo "$0 ##################################################"

  exit 1
}

trap "error_handler" ERR

init() {
  output_cmd "OK: Loading Whonix firewall..."

  set -o pipefail
  set -o errtrace

  mkdir --parents /var/lib/whonix-firewall
  rm -f /var/lib/whonix-firewall/firewall.nft
}

write_nft_script() {
  echo "$@" | tee -a /var/lib/whonix-firewall/firewall.nft >/dev/null
}

source_config_folder() {
  shopt -s nullglob
  local i
  for i in \
    /etc/whonix_firewall.d/*.conf \
    /usr/local/etc/whonix_firewall.d/*.conf; do
    bash_n_exit_code="0"
    bash_n_output="$(bash -n "$i" 2>&1)" || {
      bash_n_exit_code="$?"
      true
    }
    if [ ! "$bash_n_exit_code" = "0" ]; then
      output_cmd "ERROR: Invalid config file: $i
   bash_n_exit_code: $bash_n_exit_code
   bash_n_output:
   $bash_n_output" >&2
      exit 1
    fi
    source "$i"
  done
  shopt -u nullglob
}

nft_script_header() {
  $nftables_cmd "#!/usr/sbin/nft -f"
}

variables_defaults() {
  #[ -n "$iptables_cmd" ] || iptables_cmd="iptables --wait"
  [ -n "$nftables_cmd" ] || nftables_cmd="write_nft_script"

  [ -n "$WORKSTATION_TRANSPARENT_TCP" ] || WORKSTATION_TRANSPARENT_TCP=1
  [ -n "$WORKSTATION_TRANSPARENT_DNS" ] || WORKSTATION_TRANSPARENT_DNS=1
  [ -n "$WORKSTATION_ALLOW_SOCKSIFIED" ] || WORKSTATION_ALLOW_SOCKSIFIED=1
  [ -n "$CONTROL_PORT_FILTER_PROXY_ENABLE" ] || CONTROL_PORT_FILTER_PROXY_ENABLE=1
  [ -n "$GATEWAY_ALLOW_INCOMING_DIR_PORT" ] || GATEWAY_ALLOW_INCOMING_DIR_PORT=0
  [ -n "$GATEWAY_ALLOW_INCOMING_OR_PORT" ] || GATEWAY_ALLOW_INCOMING_OR_PORT=0
  [ -n "$DIR_PORT" ] || DIR_PORT=80
  [ -n "$OR_PORT" ] || OR_PORT=443
  [ -n "$GATEWAY_TRANSPARENT_TCP" ] || GATEWAY_TRANSPARENT_TCP=0
  [ -n "$GATEWAY_TRANSPARENT_UDP" ] || GATEWAY_TRANSPARENT_UDP=0
  [ -n "$GATEWAY_TRANSPARENT_DNS" ] || GATEWAY_TRANSPARENT_DNS=0
  [ -n "$ALLOW_GATEWAY_ROOT_USER" ] || ALLOW_GATEWAY_ROOT_USER=0
  [ -n "$ALLOW_GATEWAY_USER_USER" ] || ALLOW_GATEWAY_USER_USER=0
  [ -n "$GATEWAY_ALLOW_INCOMING_SSH" ] || GATEWAY_ALLOW_INCOMING_SSH=0
  [ -n "$GATEWAY_ALLOW_INCOMING_ICMP" ] || GATEWAY_ALLOW_INCOMING_ICMP=0
  [ -n "$GATEWAY_ALLOW_INCOMING_ICMP_FRAG_NEEDED" ] || GATEWAY_ALLOW_INCOMING_ICMP_FRAG_NEEDED=1

  ## Get Tor username, distro specific!
  [ -n "$TOR_USER" ] || TOR_USER="$(id -u debian-tor)"

  ## Get user uids.
  [ -n "$CLEARNET_USER" ] || CLEARNET_USER="$(id -u clearnet)"
  [ -n "$USER_USER" ] || USER_USER="$(id -u user)" || true
  [ -n "$ROOT_USER" ] || ROOT_USER="$(id -u root)"
  [ -n "$TUNNEL_USER" ] || TUNNEL_USER="$(id -u tunnel)"
  [ -n "$SDWDATE_USER" ] || SDWDATE_USER="$(id -u sdwdate)"
  [ -n "$SYSTEMCHECK_USER" ] || SYSTEMCHECK_USER="$(id -u systemcheck)"

  ## No NAT for clearnet user.
  NO_NAT_USERS+=" $CLEARNET_USER"

  ## No NAT for tunnel user.
  NO_NAT_USERS+=" $TUNNEL_USER"

  ## No NAT for user user.
  ## DISABLED BY DEFAULT. For testing/debugging only.
  if [ "$ALLOW_GATEWAY_USER_USER" = "1" ]; then
    if [ "$USER_USER" = "" ]; then
      output_cmd "INFO: USER_USER is unset. Not adding USER_USER to NO_NAT_USERS."
    else
      NO_NAT_USERS+=" $USER_USER"
    fi
  fi

  ## No NAT for root user.
  ## DISABLED BY DEFAULT. For testing/debugging only.
  if [ "$ALLOW_GATEWAY_ROOT_USER" = "1" ]; then
    NO_NAT_USERS+=" $ROOT_USER"
  fi

  ## Whonix-Gateway firewall does not support TUNNEL_FIREWALL_ENABLE=true yet.
  ## It only supports VPN_FIREWALL="1".
  ## In case someone confused this setting, i.e. using TUNNEL_FIREWALL_ENABLE=true
  ## since this is how it is done on Whonix-Workstation, then gracefully enable
  ## VPN_FIREWALL="1" to prevent users shooting their own feet.
  if [ "$TUNNEL_FIREWALL_ENABLE" = "true" ]; then
    VPN_FIREWALL="1"
  fi

  ## No NAT for Tor itself,
  ## unless VPN_FIREWALL mode is enabled.
  if [ "$VPN_FIREWALL" = "1" ]; then
    true
  else
    NO_NAT_USERS+=" $TOR_USER"
  fi

  if command -v "qubesdb-read" > /dev/null 2>&1; then
    #[ -n "$INT_IF" ] || INT_IF="vif+"
    [ -n "$INT_IF" ] || INT_IF="vif*"
    #[ -n "$INT_TIF" ] || INT_TIF="vif+"
    [ -n "$INT_TIF" ] || INT_TIF="vif*"
  fi

  ## External interface
  [ -n "$EXT_IF" ] || EXT_IF="eth0"
  ## Internal interface
  [ -n "$INT_IF" ] || INT_IF="eth1"
  ## Internal "tunnel" interface, usually the same as
  ## the Internal interface unless using vpn tunnels
  ## between workstations and gateway
  [ -n "$INT_TIF" ] || INT_TIF="eth1"

  if [ "$NON_TOR_GATEWAY" = "" ]; then
    if command -v "qubesdb-read" > /dev/null 2>&1; then
      NON_TOR_GATEWAY=""
    else
      ## 10.0.2.2/24: VirtualBox DHCP
      ## IP HARDCODED. If you want to change IP, set variable GATEWAY_IP through a
      ## drop-in configuration snippet in /etc/whonix_firewall.d
      ## configuration folder instead.
      NON_TOR_GATEWAY="\
            127.0.0.0/24 \
            192.168.0.0/24 \
            192.168.1.0/24 \
            10.152.152.0/24 \
            10.0.2.2/24 \
         "
    fi
  fi

  [ -n "$VPN_INTERFACE" ] || VPN_INTERFACE="tun0"

  ## Destinations you do not routed through VPN, only for Whonix-Gateway.
  if [ "$LOCAL_NET" = "" ]; then
    if command -v "qubesdb-read" > /dev/null 2>&1; then
      LOCAL_NET="\
            127.0.0.0/24 \
            10.137.0.0/16 \
            10.138.0.0/16 \
         "
    else
      ## 10.0.2.2/24: VirtualBox DHCP
      ## IP HARDCODED. If you want to change IP, set variable GATEWAY_IP through a
      ## drop-in configuration snippet in /etc/whonix_firewall.d
      ## configuration folder instead.
      LOCAL_NET="\
            127.0.0.0/24 \
            192.168.0.0/24 \
            192.168.1.0/24 \
            10.152.152.0/24 \
            10.0.2.2/24 \
         "
    fi
  fi

  if [ "$WORKSTATION_DEST_SOCKSIFIED" = "" ]; then
    ## 10.152.152.10 - Non-Qubes-Whonix-Gateway IP
    ##
    ## 10.137.0.0/8  - persistent Qubes-Whonix-Gateway IP range
    ## 10.138.0.0/8  - DispVM Qubes-Whonix-Gateway IP range
    if command -v "qubesdb-read" > /dev/null 2>&1; then
      ## https://forums.whonix.org/t/whonix-gateway-not-reachable/7484/16
      ## Qubes-Whonix:
      ## IP HARDCODED. IP 10.152.152.10 is hardcoded in some places.
      WORKSTATION_DEST_SOCKSIFIED="\
        10.137.0.0/16 \
        10.138.0.0/16 \
        10.152.152.10 \
      "
    else
      ## Non-Qubes-Whonix:
      ## IP HARDCODED. If you want to change IP, set variable GATEWAY_IP through a
      ## drop-in configuration snippet in /etc/whonix_firewall.d
      ## configuration folder instead.
      WORKSTATION_DEST_SOCKSIFIED="10.152.152.10"
    fi
  fi

  ## The following ports are used
  ## - here in /usr/bin/whonix_firewall (package: whonix-gw-firewall)
  ## - by Tor in /usr/share/tor/tor-service-defaults-torrc (package: anon-gw-anonymizer-config)
  ##
  ## The following applications will be separated, preventing identity
  ## correlation through circuit sharing.

  ## Transparent Proxy Ports for Whonix-Workstation
  [ -n "$TRANS_PORT_WORKSTATION" ] || TRANS_PORT_WORKSTATION="9040"
  [ -n "$DNS_PORT_WORKSTATION" ] || DNS_PORT_WORKSTATION="5300"

  ## Transparent Proxy Ports for Whonix-Gateway
  [ -n "$TRANS_PORT_GATEWAY" ] || TRANS_PORT_GATEWAY="9041"
  [ -n "$DNS_PORT_GATEWAY" ] || DNS_PORT_GATEWAY="5400"

  ## Control Port Filter Proxy Port
  [ -n "$CONTROL_PORT_FILTER_PROXY_PORT" ] || CONTROL_PORT_FILTER_PROXY_PORT="9051"

  [ -n "$GATEWAY_ALLOW_INCOMING_FLASHPROXY" ] || GATEWAY_ALLOW_INCOMING_FLASHPROXY="0"
  [ -n "$FLASHPROXY_PORT" ] || FLASHPROXY_PORT="9000"

  if [ ! "$WORKSTATION_ALLOW_SOCKSIFIED" = "1" ]; then
    output_cmd "INFO: WORKSTATION_ALLOW_SOCKSIFIED='${WORKSTATION_ALLOW_SOCKSIFIED}', Socks Ports will not be opened"
    return 0
  fi

  ## Socks Ports for per application circuits.
  ## SOCKS_PORT_TOR_DEFAULT
  INTERNAL_OPEN_PORTS+=" 9050 "
  ## SOCKS_PORT_TB
  INTERNAL_OPEN_PORTS+=" 9100 "
  ## SOCKS_PORT_IRC
  INTERNAL_OPEN_PORTS+=" 9101 "
  ## SOCKS_PORT_TORBIRDY
  INTERNAL_OPEN_PORTS+=" 9102 "
  ## SOCKS_PORT_IM
  INTERNAL_OPEN_PORTS+=" 9103 "
  ## SOCKS_PORT_APT_GET
  INTERNAL_OPEN_PORTS+=" 9104 "
  ## SOCKS_PORT_GPG
  INTERNAL_OPEN_PORTS+=" 9105 "
  ## SOCKS_PORT_SSH
  INTERNAL_OPEN_PORTS+=" 9106 "
  ## SOCKS_PORT_GIT
  INTERNAL_OPEN_PORTS+=" 9107 "
  ## SOCKS_PORT_SDWDATE
  INTERNAL_OPEN_PORTS+=" 9108 "
  ## SOCKS_PORT_WGET
  INTERNAL_OPEN_PORTS+=" 9109 "
  ## SOCKS_PORT_SYSTEMCHECK
  INTERNAL_OPEN_PORTS+=" 9110 "
  ## SOCKS_PORT_BITCOIN
  INTERNAL_OPEN_PORTS+=" 9111 "
  ## 9112
  ## 9113
  ## SOCKS_PORT_WHONIX_NEWS
  INTERNAL_OPEN_PORTS+=" 9114 "
  ## SOCKS_PORT_TBB_DOWNLOAD
  INTERNAL_OPEN_PORTS+=" 9115 "
  ## 9116
  ## SOCKS_PORT_CURL
  INTERNAL_OPEN_PORTS+=" 9117 "
  ## SOCKS_PORT_RSS
  INTERNAL_OPEN_PORTS+=" 9118 "
  ## 9119
  ## 9120
  ## 9121
  ## SOCKS_PORT_KDE
  INTERNAL_OPEN_PORTS+=" 9122 "
  ## SOCKS_PORT_GNOME
  INTERNAL_OPEN_PORTS+=" 9123 "
  ## SOCKS_PORT_APTITUDE
  INTERNAL_OPEN_PORTS+=" 9124 "
  ## SOCKS_PORT_YUM
  INTERNAL_OPEN_PORTS+=" 9125 "
  ## SOCKS_PORT_TBB_DEFAULT
  INTERNAL_OPEN_PORTS+=" 9150 "
  ## For testing purposes only.
  ## To test if prerouting redirection rules for socksified interfere with transparent torification.
  ## https://phabricator.whonix.org/T462
  ## SOCKS_PORT_HTTP
  #INTERNAL_OPEN_PORTS+=" 80 "
  ## SOCKS_PORT_SSL
  #INTERNAL_OPEN_PORTS+=" 443 "
}

nft_defaults() {
  ## Flush old rules.
  #$iptables_cmd -F
  #$iptables_cmd -X
  #$iptables_cmd -t nat -F
  #$iptables_cmd -t nat -X
  #$iptables_cmd -t mangle -F
  #$iptables_cmd -t mangle -X
  $nftables_cmd flush ruleset

  $nftables_cmd add table inet nat

  $nftables_cmd create table inet filter

  ## Set secure defaults.
  #$iptables_cmd -P input DROP
  $nftables_cmd "add chain inet filter input { type filter hook input priority 0; policy drop; }"

  ## forward rules does not actually do anything if forwarding is disabled. Better be safe just in case.
  #$iptables_cmd -P forward DROP
  $nftables_cmd "add chain inet filter forward { type filter hook forward priority 0; policy drop; }"

  ## Will be lifted below.
  #$iptables_cmd -P output DROP
  $nftables_cmd "add chain inet filter output { type filter hook output priority 0; policy drop; }"

  $nftables_cmd "add chain inet nat prerouting { type nat hook prerouting priority -100; }"
  $nftables_cmd "add chain inet nat output { type nat hook output priority -100; }"


}

nft_drop_invalid_incoming_packages() {
  ## DROP INVALID
  #$iptables_cmd -A input -m conntrack --ctstate INVALID -j DROP
  #$iptables_cmd -A input -m state --state INVALID -j DROP
  $nftables_cmd add rule inet filter input ct state invalid counter drop

  ## DROP INVALID SYN PACKETS
  #$iptables_cmd -A input -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" "fin|syn|rst|ack" counter drop
  #$iptables_cmd -A input -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn)" == "fin|syn" counter drop
  #$iptables_cmd -A input -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  $nftables_cmd add rule inet filter input tcp flags "&" "(syn|rst)" == "syn|rst" counter drop

  ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
  #$iptables_cmd -A input -f -j DROP
  $nftables_cmd add rule inet filter input ip frag-off "&" 0x1fff != 0 counter drop

  ## DROP INCOMING MALFORMED XMAS PACKETS
  #$iptables_cmd -A input -p tcp --tcp-flags ALL ALL -j DROP
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" "fin|syn|rst|psh|ack|urg" counter drop

  ## DROP INCOMING MALFORMED NULL PACKETS
  #$iptables_cmd -A input -p tcp --tcp-flags ALL NONE -j DROP
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" 0x0 counter drop
}

qubes() {
  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    true "timesync-fail-closed mode, skipping rest of function $FUNCNAME"
    return 0
  fi

  if [ -e /run/qubes/this-is-netvm ] || [ -e /run/qubes/this-is-proxyvm ]; then
    local int_if_item

    for int_if_item in $INT_IF; do
      ## Allow connections from port 8082 of internal vif interface for tinyproxy
      ## tinyproxy is responsible to handle TemplateVMs updates.
      #$iptables_cmd -A input -i "$int_if_item" -p tcp -m tcp --dport 8082 -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$int_if_item" tcp dport 8082 counter accept
      #$iptables_cmd -A output -o "$int_if_item" -p tcp -m tcp --sport 8082 -j ACCEPT
      $nftables_cmd add rule inet filter output oifname "$int_if_item" tcp sport 8082 counter accept
    done

    ## Qubes pre-routing. Will be able to intercept traffic destined for
    ## 10.137.255.254 to be re-routed to tinyproxy.
    #$iptables_cmd -t nat -N PR-QBS-SERVICES
    $nftables_cmd add chain inet nat PR-QBS-SERVICES
    #$iptables_cmd -t nat -A prerouting -j PR-QBS-SERVICES
    $nftables_cmd add rule inet nat prerouting counter jump PR-QBS-SERVICES

    for int_if_item in $INT_IF; do
      ## Redirects traffic destined for 10.137.255.154 to port 8082 (tinyproxy).
      #$iptables_cmd -t nat -A PR-QBS-SERVICES -d 10.137.255.254/32 -i "$int_if_item" -p tcp -m tcp --dport 8082 -j REDIRECT
      $nftables_cmd add rule inet nat PR-QBS-SERVICES iifname "$int_if_item" ip daddr 10.137.255.254 tcp dport 8082 counter redirect
    done

    ## Forward tinyproxy output to port 5300/9040 on internal (Tor) interface (eth1) to be
    ## able to connect to Internet (via Tor) to proxy updates for TemplateVM.
    #$iptables_cmd -t nat -A output -p udp -m owner --uid-owner tinyproxy -m conntrack --ctstate NEW -j DNAT --to "127.0.0.1:${DNS_PORT_GATEWAY}"
    $nftables_cmd add rule inet nat output ip protocol udp skuid tinyproxy ct state new counter dnat to "127.0.0.1:${DNS_PORT_GATEWAY}"
    #$iptables_cmd -t nat -A output -p tcp -m owner --uid-owner tinyproxy -m conntrack --ctstate NEW -j DNAT --to "127.0.0.1:${TRANS_PORT_GATEWAY}"
    $nftables_cmd add rule inet nat output ip protocol tcp skuid tinyproxy ct state new counter dnat to "127.0.0.1:${TRANS_PORT_GATEWAY}"

    ## The same for squid from qubes-updates-cache, which runs as user vm-updates.
    if getent passwd vm-updates > /dev/null; then
      #$iptables_cmd -t nat -A output -p udp -m owner --uid-owner vm-updates -m conntrack --ctstate NEW -j DNAT --to "127.0.0.1:${DNS_PORT_GATEWAY}"
      $nftables_cmd add rule inet nat output ip protocol udp skuid vm-updates ct state new counter dnat to "127.0.0.1:${DNS_PORT_GATEWAY}"
      #$iptables_cmd -t nat -A output -p tcp -m owner --uid-owner vm-updates -m conntrack --ctstate NEW -j DNAT --to "127.0.0.1:${TRANS_PORT_GATEWAY}"
      $nftables_cmd add rule inet nat output ip protocol tcp skuid vm-updates ct state new counter dnat to "127.0.0.1:${TRANS_PORT_GATEWAY}"
    fi

    ## https://github.com/QubesOS/qubes-issues/issues/3201#issuecomment-338646742
    #$iptables_cmd -A output -p udp -m owner --uid-owner tinyproxy -m conntrack --ctstate NEW -d 127.0.0.1 --dport "${DNS_PORT_GATEWAY}" -j ACCEPT
    $nftables_cmd add rule inet filter output ip daddr 127.0.0.1 skuid tinyproxy ct state new udp dport "${DNS_PORT_GATEWAY}" counter accept
    #$iptables_cmd -A output -p tcp -m owner --uid-owner tinyproxy -m conntrack --ctstate NEW -d 127.0.0.1 --dport "${TRANS_PORT_GATEWAY}" -j ACCEPT
    $nftables_cmd add rule inet filter output ip daddr 127.0.0.1 skuid tinyproxy ct state new tcp dport "${TRANS_PORT_GATEWAY}" counter accept
  fi
}

nft_input_rules() {
  ## Traffic on the loopback interface is accepted.
  #$iptables_cmd -A input -i lo -j ACCEPT
  $nftables_cmd add rule inet filter input iifname "lo" counter accept

  ## Established incoming connections are always accepted.
  ## Optionally, allow Related incoming connections when
  ## GATEWAY_ALLOW_INCOMING_RELATED_STATE mode is enabled.
  if [ "$GATEWAY_ALLOW_INCOMING_RELATED_STATE" = "1" ]; then
    #$iptables_cmd -A input -m state --state ESTABLISHED,RELATED -j ACCEPT
    $nftables_cmd add rule inet filter input ct state related,established counter accept
  else
    #$iptables_cmd -A input -m state --state ESTABLISHED -j ACCEPT
    $nftables_cmd add rule inet filter input ct state established counter accept
  fi

  ## Allow fragmentation-needed ICMP packets to avoid MTU problems
  ## when Whonix-Gateway is connected to a link that has smaller
  ## MTU than 1500 assumed by Whonix-Gateway
  if [ "$GATEWAY_ALLOW_INCOMING_ICMP_FRAG_NEEDED" = "1" ]; then
    #$iptables_cmd -A input -p icmp --icmp-type fragmentation-needed -m state --state RELATED -j ACCEPT
    $nftables_cmd add rule inet filter input icmp type destination-unreachable icmp code frag-needed ct state related counter accept
  fi

  ## Drop all incoming ICMP traffic by default.
  ## All incoming connections are dropped by default anyway, but should a user
  ## allow incoming ports (such as for incoming SSH or FlashProxy), ICMP should
  ## still be dropped to filter for example ICMP time stamp requests.
  if [ ! "$GATEWAY_ALLOW_INCOMING_ICMP" = "1" ]; then
    #$iptables_cmd -A input -p icmp -j DROP
    $nftables_cmd add rule inet filter input ip protocol icmp counter drop
  fi

  ## Allow all incoming connections on the virtual VPN network interface,
  ## when VPN_FIREWALL mode is enabled.
  ## DISABLED BY DEFAULT.
  if [ "$VPN_FIREWALL" = "1" ]; then
    #$iptables_cmd -A input -i "$VPN_INTERFACE" -j ACCEPT
    $nftables_cmd add rule inet filter input iifname "$VPN_INTERFACE" counter accept
  fi

  local ext_if_item

  for ext_if_item in $EXT_IF; do
    ## Allow incoming SSH connections on the external interface.
    ## DISABLED BY DEFAULT. For testing/debugging only.
    if [ "$GATEWAY_ALLOW_INCOMING_SSH" = "1" ]; then
      #$iptables_cmd -A input -i "$ext_if_item" -p tcp --dport 22 -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$ext_if_item" tcp dport 22 counter accept
    fi

    ## Allow incoming Flash Proxy connections on the external interface.
    ## This has NOTHING to do with Adobe Flash.
    ## DISABLED BY DEFAULT.
    if [ "$GATEWAY_ALLOW_INCOMING_FLASHPROXY" = "1" ]; then
      #$iptables_cmd -A input -i "$ext_if_item" -p tcp --dport "$FLASHPROXY_PORT" -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$ext_if_item" tcp dport "$FLASHPROXY_PORT" counter accept
    fi

    local local_port_to_open
    if [ "${info_enabled}" = "1" ]; then
      output_cmd "INFO: Opening External TCP port(s): ${EXTERNAL_OPEN_PORTS:-"NONE"}"
    fi
    for local_port_to_open in $EXTERNAL_OPEN_PORTS; do
      #$iptables_cmd -A input -i "$ext_if_item" -p tcp --dport "$local_port_to_open" -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$ext_if_item" tcp dport "$local_port_to_open" counter accept
    done

    local local_udp_port_to_open
    if [ "${info_enabled}" = "1" ]; then
      output_cmd "INFO: Opening External UDP port(s): ${EXTERNAL_UDP_OPEN_PORTS:-"NONE"}"
    fi
    for local_udp_port_to_open in $EXTERNAL_UDP_OPEN_PORTS; do
      #$iptables_cmd -A input -p udp --dport "$local_udp_port_to_open" -j ACCEPT
      $nftables_cmd add rule inet filter input udp dport "$local_udp_port_to_open" counter accept
    done

    if [ "$EXTERNAL_OPEN_ALL" = "true" ]; then
      [ "${info_enabled}" = "1" ] && output_cmd "INFO: EXTERNAL_OPEN_ALL='true', opening all External ports"
      #$iptables_cmd -A input -j ACCEPT
      $nftables_cmd add rule inet filter input counter accept
    fi
  done

  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    true "timesync-fail-closed mode, skipping rest of function $FUNCNAME"
    return 0
  fi

  for ext_if_item in $EXT_IF; do
    ## Allow incoming DIRPORT connections for an optional Tor relay.
    ## DISABLED BY DEFAULT.
    if [ "$GATEWAY_ALLOW_INCOMING_DIR_PORT" = "1" ]; then
      #$iptables_cmd -A input -i "$ext_if_item" -p tcp --dport "$DIR_PORT" -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$ext_if_item" tcp dport "$DIR_PORT" counter accept
    fi

    ## Allow incoming ORPORT connections for an optional Tor relay.
    ## DISABLED BY DEFAULT.
    if [ "$GATEWAY_ALLOW_INCOMING_OR_PORT" = "1" ]; then
      #$iptables_cmd -A input -i "$ext_if_item" -p tcp --dport "$OR_PORT" -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$ext_if_item" tcp dport "$OR_PORT" counter accept
    fi

    ## Custom Open Ports on external interface
    ## - untested, should work
    ## - Replace 22,9050,9051,9150,9151 with any ports you like to be open, example: 9050,9051
    ##   or just 9050
    ## - $iptables_cmd v1.4.14: multiport needs -p tcp, -p udp, -p udplite, -p sctp or -p dccp
    ##$iptables_cmd -A input -i "$ext_if_item" -p tcp --match multiport --dports 22,9050,9051,9150,9151 -j ACCEPT
    $nftables_cmd add rule inet filter input iifname "$ext_if_item" ip protocol tcp tcp dport { 22,9050,9051,9150,9151 } counter accept
    ##$iptables_cmd -A input -i "$ext_if_item" -p udp --match multiport --dports 22,9050,9051,9150,9151 -j ACCEPT
    $nftables_cmd add rule inet filter input iifname "$ext_if_item" ip protocol udp udp dport { 22,9050,9051,9150,9151 } counter accept

    ## OPTIONAL Allow incoming OpenVPN connections on the external interface.
    ##$iptables_cmd -A input -i "$ext_if_item" -p tcp --dport 1194 -j ACCEPT
    #$nftables_cmd add rule inet filter input iifname "$ext_if_item" tcp dport 1194 counter accept
  done

  local int_tif_item
  local int_if_item

  for int_tif_item in $INT_TIF; do
    if [ "$WORKSTATION_TRANSPARENT_DNS" = "1" ]; then
      ## Allow DNS traffic to DnsPort.
      #$iptables_cmd -A input -i "$int_tif_item" -p udp --dport "$DNS_PORT_WORKSTATION" -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$int_tif_item" udp dport "$DNS_PORT_WORKSTATION" counter accept
    fi
  done

  for int_if_item in $INT_IF; do
    if [ "$WORKSTATION_TRANSPARENT_TCP" = "1" ]; then
      ## Allow TCP traffic TransPort.
      #$iptables_cmd -A input -i "$int_if_item" -p tcp --dport "$TRANS_PORT_WORKSTATION" -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$int_if_item" tcp dport "$TRANS_PORT_WORKSTATION" counter accept
    fi
  done

  for int_tif_item in $INT_TIF; do
    ## Allow TCP traffic to Control Port Filter Proxy.
    if [ "$CONTROL_PORT_FILTER_PROXY_ENABLE" = "1" ]; then
      #$iptables_cmd -A input -i "$int_tif_item" -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$int_tif_item" tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT" counter accept
    fi

    ## Allow socksified applications.
    if [ "$WORKSTATION_ALLOW_SOCKSIFIED" = "1" ]; then
      if [ "${info_enabled}" = "1" ]; then
        output_cmd "INFO: WORKSTATION_ALLOW_SOCKSIFIED='1', Socks Ports will be reacheable from the Workstation"
        output_cmd "INFO: opening Internal TCP port(s): ${INTERNAL_OPEN_PORTS}"
      fi
      for socks_port in $INTERNAL_OPEN_PORTS; do
        true "socks_port: $socks_port"
        #$iptables_cmd -A input -i "$int_tif_item" -p tcp --dport "$socks_port" -j ACCEPT
        $nftables_cmd add rule inet filter input iifname "$int_tif_item" tcp dport "$socks_port" counter accept
      done

      ## Accept ports 9152-9229 prepared for user custom applications.
      ## See /usr/share/tor/tor-service-defaults-torrc for more comments.
      [ "${info_enabled}" = "1" ] && output_cmd "INFO: opening TCP port(s) 9152:9229 for user custom applications"
      #$iptables_cmd -A input -i "$int_tif_item" -p tcp --match multiport --dports 9152:9229 -j ACCEPT
      $nftables_cmd add rule inet filter input iifname "$int_tif_item" tcp dport 9152-9229 counter accept
    fi
  done

  for int_if_item in $INT_IF; do
    ## Redirect Control Port Filter Proxy to Control Port Filter Proxy port.
    if [ "$CONTROL_PORT_FILTER_PROXY_ENABLE" = "1" ]; then
      local non_tor_gateway_item
      for workstation_dest_socksified_item in $WORKSTATION_DEST_SOCKSIFIED; do
        #$iptables_cmd -t nat -A prerouting -i "$int_if_item" -d "$workstation_dest_socksified_item" -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" -j REDIRECT --to-ports "$CONTROL_PORT_FILTER_PROXY_PORT"
        $nftables_cmd add rule inet nat prerouting iifname "$int_if_item" ip daddr "$workstation_dest_socksified_item" tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT" counter redirect to :"$CONTROL_PORT_FILTER_PROXY_PORT"
      done
    fi

    if [ "$WORKSTATION_ALLOW_SOCKSIFIED" = "1" ]; then
      for socks_port in $INTERNAL_OPEN_PORTS; do
        local non_tor_gateway_item
        for workstation_dest_socksified_item in $WORKSTATION_DEST_SOCKSIFIED; do
          true "socks_port: $socks_port"
          ## Redirect Browser/IRC/TorBirdy, etc. to SocksPort.
          #$iptables_cmd -t nat -A prerouting -i "$int_if_item" -d "$workstation_dest_socksified_item" -p tcp --dport "$socks_port" -j REDIRECT --to-ports "$socks_port"
          $nftables_cmd add rule inet nat prerouting iifname "$int_if_item" ip daddr "$workstation_dest_socksified_item" tcp dport "$socks_port" counter redirect to :"$socks_port"
        done
      done

      ## Redirect ports 9152-9229 prepared for user custom applications.
      local non_tor_gateway_item
      for workstation_dest_socksified_item in $WORKSTATION_DEST_SOCKSIFIED; do
        #$iptables_cmd -t nat -A prerouting -i "$int_if_item" -d "$workstation_dest_socksified_item" -p tcp --dport 9152:9229 -j REDIRECT
        $nftables_cmd add rule inet nat prerouting iifname "$int_if_item" ip daddr "$workstation_dest_socksified_item" tcp dport 9152-9229 counter redirect
      done
    fi

    if [ "$WORKSTATION_TRANSPARENT_DNS" = "1" ]; then
      ## Redirect remaining DNS traffic to DNS_PORT_WORKSTATION.
      ## Only user installed applications not configured to use a SocksPort are affected.
      #$iptables_cmd -t nat -A prerouting -i "$int_if_item" -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT_WORKSTATION"
      $nftables_cmd add rule inet nat prerouting iifname "$int_if_item" udp dport 53 counter redirect to :"$DNS_PORT_WORKSTATION"
    fi

    if [ "$WORKSTATION_TRANSPARENT_TCP" = "1" ]; then
      ## Catch all remaining TCP and redirect to TransPort.
      ## Only user installed applications not configured to use a SocksPort are affected.
      #$iptables_cmd -t nat -A prerouting -i "$int_if_item" -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT_WORKSTATION"
      $nftables_cmd add rule inet nat prerouting iifname "$int_if_item" tcp flags "&" "(fin|syn|rst|ack)" == syn counter redirect to :"$TRANS_PORT_WORKSTATION"

      ## Optionally restrict TransPort.
      ## Replace above rule with a more restrictive one, e.g.:
      ##$iptables_cmd -t nat -A prerouting -i "$int_if_item" -p tcp --match multiport --dports 80,443 --syn -j REDIRECT --to-ports "$TRANS_PORT_WORKSTATION"
      #$nftables_cmd add rule inet nat prerouting iifname "$int_if_item" tcp dport { 80,443} tcp flags "&" "(fin|syn|rst|ack)" == syn counter redirect to :"$TRANS_PORT_WORKSTATION"
    fi
  done
}

nft_input_defaults() {
  ## Log.
  ##$iptables_cmd -A input -j LOG --log-prefix "Whonix_blocked_input4: "
  #$nftables_cmd add rule inet filter input counter log prefix \"Whonix_blocked_input4:\"

  ## Reject anything not explicitly allowed above.
  ## Drop is better than reject here, because we do not want to reveal it's a Whonix-Gateway.
  ## (In case someone running Whonix-Gateway on bare metal.)
  #$iptables_cmd -A input -j DROP
  $nftables_cmd add rule inet filter input counter drop
}

nft_forward() {
  ## Log.
  ##$iptables_cmd -A forward -j LOG --log-prefix "Whonix_blocked_forward4: "
  #$nftables_cmd add rule inet filter forward counter log prefix \"Whonix_blocked_forward4:\"

  ## Reject everything.
  #$iptables_cmd -A forward -j REJECT --reject-with icmp-admin-prohibited
  $nftables_cmd add rule inet filter forward counter reject
}

nft_reject_invalid_outgoing_packages() {
  ## Drop invalid outgoing packages,
  ## unless NO_REJECT_INVALID_OUTGOING_PACKAGES is set to 1.
  if [ ! "$NO_REJECT_INVALID_OUTGOING_PACKAGES" = "1" ]; then
    ## https://lists.torproject.org/pipermail/tor-talk/2014-March/032507.html
    #$iptables_cmd -A output -m conntrack --ctstate INVALID -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule inet filter output ct state invalid counter reject
    #$iptables_cmd -A output -m state --state INVALID -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule inet filter output ct state invalid counter reject
    ##$iptables_cmd -A output ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,FIN ACK,FIN -j REJECT --reject-with icmp-admin-prohibited
    #$nftables_cmd add rule inet filter output oifname != "lo" ip saddr != 127.0.0.1 ip daddr != 127.0.0.1 tcp flags "&" "(fin|ack)" == "fin|ack" counter reject
    ##$iptables_cmd -A output ! -o lo ! -d 127.0.0.1 ! -s 127.0.0.1 -p tcp -m tcp --tcp-flags ACK,RST ACK,RST -j REJECT --reject-with icmp-admin-prohibited
    #$nftables_cmd add rule inet filter output oifname != "lo" ip saddr != 127.0.0.1 ip daddr != 127.0.0.1 tcp flags "&" "(rst|ack)" == "rst|ack" counter reject

    ## DROP INVALID SYN PACKETS
    #$iptables_cmd -A output -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == "fin|syn|rst|ack" counter reject
    #$iptables_cmd -A output -p tcp --tcp-flags SYN,FIN SYN,FIN -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn)" == "fin|syn" counter reject
    #$iptables_cmd -A output -p tcp --tcp-flags SYN,RST SYN,RST -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule inet filter output tcp flags "&" "(syn|rst)" == "syn|rst" counter reject

    ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
    #$iptables_cmd -A output -f -j REJECT --reject-with icmp-admin-prohibited
    ## TODO: IPv6?
    $nftables_cmd add rule inet filter output ip frag-off "&" 0x1fff != 0 counter reject

    ## DROP INCOMING MALFORMED XMAS PACKETS
    #$iptables_cmd -A output -p tcp --tcp-flags ALL ALL -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == "fin|syn|rst|psh|ack|urg" counter reject

    ## DROP INCOMING MALFORMED NULL PACKETS
    #$iptables_cmd -A output -p tcp --tcp-flags ALL NONE -j REJECT --reject-with icmp-admin-prohibited
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == 0x0 counter reject
  fi
}

nft_output() {
  ## Allow outgoing traffic on VPN interface,
  ## if VPN_FIREWALL mode is enabled.
  ## DISABLED BY DEFAULT.
  if [ "$VPN_FIREWALL" = "1" ]; then
    #$iptables_cmd -A output -o "$VPN_INTERFACE" -j ACCEPT
    $nftables_cmd add rule inet filter output oifname "$VPN_INTERFACE" counter accept
  fi

  local no_nat_user
  for no_nat_user in $NO_NAT_USERS; do
    #$iptables_cmd -t nat -A output -m owner --uid-owner "$no_nat_user" -j RETURN
    $nftables_cmd add rule inet nat output skuid "$no_nat_user" counter return
  done

  if [ "$firewall_mode" = "full" ]; then
    ## Redirect of Gateway DNS traffic to DNS_PORT_GATEWAY.
    ## DISABLED BY DEFAULT. default. Using SocksPort instead.
    if [ "$GATEWAY_TRANSPARENT_DNS" = "1" ]; then
      #$iptables_cmd -t nat -A output -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT_GATEWAY"
      $nftables_cmd add rule inet nat output udp dport 53 counter redirect to :"$DNS_PORT_GATEWAY"
    fi
  fi

  if [ "$firewall_mode" = "full" ]; then
    ## Exclude connections to local network, Whonix-Workstation, VirtualBox from being redirected through Tor,
    ## unless VPN_FIREWALL mode is enabled.
    ## ENABLED BY DEFAULT.
    if [ ! "$VPN_FIREWALL" = "1" ]; then
      local non_tor_gateway_item
      for non_tor_gateway_item in $NON_TOR_GATEWAY; do
        #$iptables_cmd -t nat -A output -m iprange --dst-range "$non_tor_gateway_item" -j RETURN
        $nftables_cmd add rule inet nat output ip daddr "$NON_TOR_GATEWAY" counter return
      done
    fi
  fi

  if [ "$firewall_mode" = "full" ]; then
    ## Redirect all Gateway TCP traffic to TRANS_PORT_GATEWAY.
    ## DISABLED BY DEFAULT. Using SocksPort instead.
    if [ "$GATEWAY_TRANSPARENT_TCP" = "1" ]; then
      #$iptables_cmd -t nat -A output -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT_GATEWAY"
      $nftables_cmd add rule inet nat output tcp flags "&" "(fin|syn|rst|ack)" == syn counter redirect to :"$TRANS_PORT_GATEWAY"
    fi
  fi

  ## Existing connections are accepted.
  #$iptables_cmd -A output -m state --state ESTABLISHED -j ACCEPT
  $nftables_cmd add rule inet filter output ct state established counter accept

  if [ "$firewall_mode" = "full" ]; then
    ## Accept outgoing connections to local network, Whonix-Workstation and VirtualBox,
    ## unless VPN_FIREWALL mode is enabled.
    ## ENABLED BY DEFAULT.
    if [ ! "$VPN_FIREWALL" = "1" ]; then
      for non_tor_gateway_item in $NON_TOR_GATEWAY; do
        #$iptables_cmd -A output -m iprange --dst-range "$non_tor_gateway_item" -j ACCEPT
        $nftables_cmd add rule inet filter output ip daddr "$non_tor_gateway_item" counter accept
      done
    fi
  fi

  if [ "$firewall_mode" = "full" ]; then
    ## Accept outgoing connections to local network,
    ## when VPN_FIREWALL mode is enabled.
    ## DISABLED BY DEFAULT.
    if [ "$VPN_FIREWALL" = "1" ]; then
      local local_net_item
      for local_net_item in $LOCAL_NET; do
        #$iptables_cmd -A output -m iprange --dst-range "$local_net_item" -j ACCEPT
        $nftables_cmd add rule inet filter output ip daddr "$local_net_item" counter accept
      done
    fi
  fi

  ## Prevent connections to Tor SocksPorts.
  ## https://phabricator.whonix.org/T533#11025
  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    output_cmd "INFO: not opening Internal TCP port(s): ${INTERNAL_OPEN_PORTS}, except 9108 for sdwdate, because firewall_mode=${firewall_mode}"
    local socks_port_item
    for socks_port_item in $INTERNAL_OPEN_PORTS; do
      true "socks_port_item: $socks_port_item"
      ## SOCKS_PORT_SDWDATE
      if [ "$socks_port_item" = "9108" ]; then
        ## Permit connections to SOCKS_PORT_SDWDATE 9108 even in
        ## 'timesync-fail-closed' mode. Otherwise, sdwdate could never
        ## succeed and firewall_mode could never change to 'full'.
        continue
      fi
      #$iptables_cmd -A output -p tcp --dport "$socks_port_item" --dst "127.0.0.1" -j REJECT
      $nftables_cmd add rule inet filter output ip daddr 127.0.0.1 tcp dport "$socks_port_item" counter reject
    done
  fi

  ## Access to localhost is required even in timesync-fail-closed mode,
  ## otherwise breaks applications such as konsole and kwrite.
  #$iptables_cmd -A output -o lo -j ACCEPT
  $nftables_cmd add rule inet filter output oifname "lo" counter accept

  for no_nat_user in $NO_NAT_USERS; do
    #$iptables_cmd -A output -m owner --uid-owner "$no_nat_user" -j ACCEPT
    $nftables_cmd add rule inet filter output skuid "$no_nat_user" counter accept
  done

  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    ## Allow sdwdate talking to localhost and Tor in Whonix firewall timesync-fail-closed mode.
    ## Otherwise in Whonix firewall full mode this rule is redundant.
    #$iptables_cmd -A output -m owner --uid-owner "$SDWDATE_USER" -m iprange --dst-range "127.0.0.1" -j ACCEPT
    $nftables_cmd add rule inet filter output skuid "$SDWDATE_USER" ip daddr 127.0.0.1 counter accept
    #$iptables_cmd -A output -m owner --uid-owner "$SYSTEMCHECK_USER" -m iprange --dst-range "127.0.0.1" -j ACCEPT
    $nftables_cmd add rule inet filter output skuid "$SYSTEMCHECK_USER" ip daddr 127.0.0.1 counter accept

    #$iptables_cmd -A output -p tcp --dport "$CONTROL_PORT_FILTER_PROXY_PORT" --dst "127.0.0.1" -j ACCEPT
    $nftables_cmd add rule inet filter output ip daddr 127.0.0.1 tcp dport "$CONTROL_PORT_FILTER_PROXY_PORT" counter accept
  fi

  ## Log.
  ##$iptables_cmd -A output -j LOG --log-prefix "Whonix_blocked_output4: "
  #$nftables_cmd add rule inet filter output counter log prefix \"Whonix_blocked_output4:\"

  ## Reject all other outgoing traffic.
  #$iptables_cmd -A output -j REJECT --reject-with icmp-admin-prohibited
  $nftables_cmd add rule inet filter output counter reject
}

nft_check() {
   nft --check --file /var/lib/whonix-firewall/firewall.nft
}

nft_load() {
   nft --file /var/lib/whonix-firewall/firewall.nft
}

status_files() {
  mkdir --parents /run/whonix_firewall
  if [ -e /run/whonix_firewall/first_run_current_boot.status ]; then
    touch /run/whonix_firewall/consecutive_run.status
    return 0
  fi
  touch /run/whonix_firewall/first_run_current_boot.status
}

date_cmd() {
  date -u +"%Y-%m-%d %T"
}

output_cmd() {
  echo "$(date_cmd) - $0 - $@"
}

firewall_mode_detection() {
  if [ ! "$firewall_mode" = "" ]; then
    output_cmd "OK: Skipping firewall mode detection since already set to '$firewall_mode'."
    if [ "$firewall_mode" = "timesync-fail-closed" ]; then
      output_cmd "OK: (Only local Tor control port connections and torified sdwdate allowed.)"
      return 0
    elif [ "$firewall_mode" = "full" ]; then
      output_cmd "OK: (Full torified network access allowed.)"
      return 0
    else
      output_cmd "ERROR: firewall_mode must be set to either 'full' or 'timesync-fail-closed'."
      error_handler
    fi
  fi

  ## Run Whonix firewall in full mode if sdwdate already succeeded.
  if [ -e /run/sdwdate/first_success ]; then
    firewall_mode=full
    output_cmd "OK: (/run/sdwdate/first_success exists.)"
  elif [ -e /run/sdwdate/success ]; then
    firewall_mode=full
    output_cmd "OK: (/run/sdwdate/success exists.)"
  ## /run/whonix_firewall/first_run_current_boot.status already exists,
  ## therefore have Whonix firewall run in full mode.
  elif [ -e /run/whonix_firewall/first_run_current_boot.status ]; then
    firewall_mode=full
    output_cmd "OK: (/run/whonix_firewall/first_run_current_boot.status exists.)"
  else
    ## /run/whonix_firewall/first_run_current_boot.status does not yet exist,
    ## therefore return 'yes, timesync-fail-closed'.
    firewall_mode=timesync-fail-closed
  fi

  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    output_cmd "OK: First run during current boot, therefore running in timesync-fail-closed mode."
    output_cmd "OK: (Only local Tor control port connections and torified sdwdate allowed.)"
  else
    output_cmd "OK: Consecutive run during current boot, therefore running in full mode."
    output_cmd "OK: (Full torified network access allowed.)"
  fi
}

end() {
  output_cmd "OK: Whonix firewall loaded."

  exit 0
}

variable_list="
WORKSTATION_TRANSPARENT_TCP
WORKSTATION_TRANSPARENT_DNS
WORKSTATION_ALLOW_SOCKSIFIED
CONTROL_PORT_FILTER_PROXY_ENABLE
GATEWAY_ALLOW_INCOMING_DIR_PORT
GATEWAY_ALLOW_INCOMING_OR_PORT
DIR_PORT
OR_PORT
GATEWAY_TRANSPARENT_TCP
GATEWAY_TRANSPARENT_UDP
GATEWAY_TRANSPARENT_DNS
ALLOW_GATEWAY_ROOT_USER
ALLOW_GATEWAY_USER_USER
GATEWAY_ALLOW_INCOMING_SSH
GATEWAY_ALLOW_INCOMING_ICMP
"

print_variables() {
  if [ ! "${info_enabled}" = "1" ]; then
    return 0
  fi
  for item in ${variable_list}; do
    eval value='$'"${item}"
    output_cmd "INFO: ${item}=${value}"
  done
}

main() {
  init
  source_config_folder
  variables_defaults
  set -f
  nft_script_header
  firewall_mode_detection
  print_variables
  nft_defaults
  nft_drop_invalid_incoming_packages
  qubes
  nft_input_rules
  nft_input_defaults
  nft_forward
  nft_reject_invalid_outgoing_packages
  nft_output
  nft_check
  nft_load
  status_files
  end
}

usage() {
  echo "usage: ${0##*/} [options]
    -i, --info           print informational messages
    -h, --help           print this help message"
}

while true; do
  case $1 in
      -s | --source)
      source_only=1
      shift 1
      ;;
    -i | --info)
      info_enabled=1
      shift 1
      ;;
    "") break ;;
    -h | --help | *)
      usage
      exit 1
      ;;
  esac
done

if [ "$source_only" = "1" ]; then
   return 0
fi

main
