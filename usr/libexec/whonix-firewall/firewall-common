#!/bin/bash

## Copyright (C) 2012 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## Copyright (C) 2014 - 2015 Jason Mehring <nrgaway@gmail.com>
## Copyright (C) 2024 - 2024 Benjamin Grande M. S. <ben.grande.b@gmail.com>
## See the file COPYING for copying conditions.

set -eu -o pipefail -o errtrace

## Function to use shellcheck on all the variables inside the function.
# shellcheck disable=SC2034
common_variables_defaults(){
  source_only=""
  info_enabled=""
  firewall_mode=""
  firewall_allow_udp=""
  outgoing_allow_ip_list=""
  TUNNEL_FIREWALL_ENABLE=""
  VPN_FIREWALL=""
  EXTERNAL_OPEN_ALL=""
  EXTERNAL_UDP_OPEN_PORTS=""
  EXTERNAL_OPEN_PORTS=""
  NO_REJECT_INVALID_OUTGOING_PACKAGES=""
}
common_variables_defaults

print_variables() {
  if [ ! "${info_enabled}" = "1" ]; then
    return 0
  fi
  local item
  # shellcheck disable=SC2154
  for item in ${variable_list}; do
    eval value='$'"${item}"
    # shellcheck disable=SC2154
    output_cmd "INFO: ${item}=${value}"
  done
}

error_handler() {
  echo "$0 ##################################################"
  echo "$0 ERROR: Whonix firewall script failed!"
  echo "$0 ##################################################"
  exit 1
}
trap "error_handler" ERR

init() {
  output_cmd "OK: Loading Whonix firewall..."
  mkdir --parents /var/lib/whonix-firewall
  rm -f /var/lib/whonix-firewall/firewall.nft
}

write_nft_script() {
  echo "$@" | tee -a /var/lib/whonix-firewall/firewall.nft >/dev/null
}
[ -n "${nftables_cmd:-}" ] || nftables_cmd="write_nft_script"

source_config_folder() {
  shopt -s nullglob
  local i
  for i in \
    /etc/whonix_firewall.d/*.conf \
    /usr/local/etc/whonix_firewall.d/*.conf; do
    bash_n_exit_code="0"
    bash_n_output="$(bash -n "$i" 2>&1)" || {
      bash_n_exit_code="$?"
      true
    }
    if [ ! "$bash_n_exit_code" = "0" ]; then
      output_cmd "ERROR: Invalid config file: $i
   bash_n_exit_code: $bash_n_exit_code
   bash_n_output:
   $bash_n_output" >&2
      exit 1
    fi
    source "$i"
  done
  shopt -u nullglob
}

nft_script_header() {
  $nftables_cmd "#!/usr/sbin/nft -f"
}

nft_check() {
  nft --check --file /var/lib/whonix-firewall/firewall.nft
}

nft_load() {
  nft --file /var/lib/whonix-firewall/firewall.nft
}

status_files() {
  mkdir --parents /run/whonix_firewall
  if [ -e /run/whonix_firewall/first_run_current_boot.status ]; then
    touch /run/whonix_firewall/consecutive_run.status
    return 0
  fi
  touch /run/whonix_firewall/first_run_current_boot.status
}

date_cmd() {
  date -u +"%Y-%m-%d %T"
}

output_cmd() {
  echo "$(date_cmd) - ${0##*/} - $*"
}

end() {
  output_cmd "OK: Whonix firewall loaded."
  exit 0
}

firewall_mode_detection() {
  if [ -n "${firewall_mode}" ]; then
    output_cmd "OK: Skipping firewall mode detection since already set to '$firewall_mode'."
    if [ "$firewall_mode" = "timesync-fail-closed" ]; then
      output_cmd "OK: (Only local Tor control port connections and torified sdwdate allowed.)"
      return 0
    elif [ "$firewall_mode" = "full" ]; then
      output_cmd "OK: (Full torified network access allowed.)"
      return 0
    else
      output_cmd "ERROR: firewall_mode must be set to either 'full' or 'timesync-fail-closed'."
      error_handler
    fi
  fi

  ## Run Whonix firewall in full mode if sdwdate already succeeded.
  if [ -e /run/sdwdate/first_success ]; then
    firewall_mode=full
    output_cmd "OK: (/run/sdwdate/first_success exists.)"
  elif [ -e /run/sdwdate/success ]; then
    firewall_mode=full
    output_cmd "OK: (/run/sdwdate/success exists.)"
  ## /run/whonix_firewall/first_run_current_boot.status already exists,
  ## therefore have Whonix firewall run in full mode.
  elif [ -e /run/whonix_firewall/first_run_current_boot.status ]; then
    firewall_mode=full
    output_cmd "OK: (/run/whonix_firewall/first_run_current_boot.status exists.)"
  else
    ## /run/whonix_firewall/first_run_current_boot.status does not yet exist,
    ## therefore return 'yes, timesync-fail-closed'.
    firewall_mode=timesync-fail-closed
  fi

  if [ "$firewall_mode" = "timesync-fail-closed" ]; then
    output_cmd "OK: First run during current boot, therefore running in timesync-fail-closed mode."
    output_cmd "OK: (Only local Tor control port connections and torified sdwdate allowed.)"
  else
    output_cmd "OK: Consecutive run during current boot, therefore running in full mode."
    output_cmd "OK: (Full torified network access allowed.)"
  fi
}

usage() {
  echo "usage: ${0##*/} [options]
 -s, --source         only source the script
 -i, --info           print informational messages
 -h, --help           print this help message"
}


nft_reject_invalid_outgoing_packages() {
  ## Drop invalid outgoing packages,
  ## unless NO_REJECT_INVALID_OUTGOING_PACKAGES is set to 1.
  if [ ! "$NO_REJECT_INVALID_OUTGOING_PACKAGES" = "1" ]; then
    ## https://lists.torproject.org/pipermail/tor-talk/2014-March/032507.html
    $nftables_cmd add rule inet filter output ct state invalid counter reject
    #$nftables_cmd add rule inet filter output oifname != "lo" ip saddr != 127.0.0.1 ip daddr != 127.0.0.1 tcp flags "&" "(fin|ack)" == "fin|ack" counter reject

    ## DROP INVALID SYN PACKETS
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == "fin|syn|rst|ack" counter reject
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn)" == "fin|syn" counter reject
    $nftables_cmd add rule inet filter output tcp flags "&" "(syn|rst)" == "syn|rst" counter reject

    ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
    ## TODO: IPv6?
    $nftables_cmd add rule inet filter output ip frag-off "&" 0x1fff != 0 counter reject

    ## DROP INCOMING MALFORMED XMAS PACKETS
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == "fin|syn|rst|psh|ack|urg" counter reject

    ## DROP INCOMING MALFORMED NULL PACKETS
    $nftables_cmd add rule inet filter output tcp flags "&" "(fin|syn|rst|psh|ack|urg)" == 0x0 counter reject
  fi
}

nft_drop_invalid_incoming_packages() {
  ## DROP INVALID
  $nftables_cmd add rule inet filter input ct state invalid counter drop

  ## DROP INVALID SYN PACKETS
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" "fin|syn|rst|ack" counter drop
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn)" == "fin|syn" counter drop
  $nftables_cmd add rule inet filter input tcp flags "&" "(syn|rst)" == "syn|rst" counter drop

  ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
  $nftables_cmd add rule inet filter input ip frag-off "&" 0x1fff != 0 counter drop
  ## TODO: Useful for IPv6?

  ## DROP INCOMING MALFORMED XMAS PACKETS
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" "fin|syn|rst|psh|ack|urg" counter drop

  ## DROP INCOMING MALFORMED NULL PACKETS
  $nftables_cmd add rule inet filter input tcp flags "&" "(fin|syn|rst|psh|ack|urg)" "==" 0x0 counter drop
}
